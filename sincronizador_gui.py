import os
import shutil
from pathlib import Path
import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext

# === CONFIGURA√á√ÉO: MAPEAR SUAS PASTAS ORIGEM E DESTINO AQUI ===
# Use caminhos absolutos. Cada par representa uma sincroniza√ß√£o de uma pasta espec√≠fica.

PASTAS_MAPEADAS = {
    "Projeto 1": (
        Path(r"C:\Caminho\Origem\Projeto1"),  # Caminho de origem gen√©rico
        Path(r"D:\Backup\Projeto1")            # Caminho de destino gen√©rico
    ),
    "Projeto 2": (
        Path(r"C:\Caminho\Origem\Projeto2"),
        Path(r"D:\Backup\Projeto2")
    ),
    # Adicione mais pares conforme necess√°rio
}


class AppSync:
    def __init__(self, root):
        self.root = root
        self.root.title("Sincronizador de Pastas")
        self.root.geometry("650x450")
        self.root.resizable(False, False)
        self.create_widgets()

    def create_widgets(self):
        # T√≠tulo e exibi√ß√£o dos pares de sincroniza√ß√£o
        tk.Label(self.root, text="üîÑ Pastas que ser√£o sincronizadas:", font=("Segoe UI", 10, "bold")).pack(pady=(10, 0))
        for nome, (origem, destino) in PASTAS_MAPEADAS.items():
            tk.Label(self.root, text=f"{nome}:").pack()
            tk.Label(self.root, text=f"Origem: {origem}", fg="gray").pack()
            tk.Label(self.root, text=f"Destino: {destino}", fg="gray").pack(pady=(0, 10))

        # Bot√£o para iniciar a sincroniza√ß√£o
        tk.Button(self.root, text="Iniciar Sincroniza√ß√£o", bg="#007BFF", fg="white", command=self.iniciar_sincronizacao).pack(pady=10)

        # √Årea de log com rolagem
        tk.Label(self.root, text="Log de Sincroniza√ß√£o:").pack()
        self.log_area = scrolledtext.ScrolledText(self.root, width=80, height=12, state="disabled")
        self.log_area.pack(pady=(5, 10))

    def log(self, mensagem):
        # Exibe mensagens no log
        self.log_area.configure(state="normal")
        self.log_area.insert(tk.END, mensagem + "\n")
        self.log_area.yview(tk.END)
        self.log_area.configure(state="disabled")

    def iniciar_sincronizacao(self):
        # Inicia o processo de sincroniza√ß√£o para todos os pares definidos
        self.log("üîÅ Iniciando sincroniza√ß√£o...")
        for nome, (origem, destino) in PASTAS_MAPEADAS.items():
            self.log(f"üìÅ {nome} ‚Üí Sincronizando...")
            self.sincronizar_pasta(origem, destino)
        self.log("‚úÖ Sincroniza√ß√£o conclu√≠da.")

    def sincronizar_pasta(self, origem: Path, destino: Path):
        # Verifica se a pasta de origem existe
        if not origem.exists():
            self.log(f"[‚ö†Ô∏è Aviso] Origem n√£o encontrada: {origem}")
            return

        # Percorre todos os arquivos e subpastas
        for root, dirs, files in os.walk(origem):
            # Ignora diret√≥rios ocultos (que come√ßam com '.')
            dirs[:] = [d for d in dirs if not d.startswith(".")]

            for file in files:
                # Ignora arquivos dentro de pastas ocultas
                if any(part.startswith(".") for part in Path(root).parts):
                    continue

                caminho_origem = Path(root) / file
                caminho_relativo = caminho_origem.relative_to(origem)
                caminho_destino = destino / caminho_relativo

                try:
                    # Garante que o diret√≥rio de destino exista
                    caminho_destino.parent.mkdir(parents=True, exist_ok=True)

                    # Copia apenas se o arquivo for novo ou modificado
                    if not caminho_destino.exists() or os.path.getmtime(caminho_origem) > os.path.getmtime(caminho_destino):
                        shutil.copy2(caminho_origem, caminho_destino)
                        self.log(f"‚úî Copiado: {caminho_destino}")
                    else:
                        self.log(f"‚Ü™ Ignorado (sem altera√ß√£o): {caminho_destino}")
                except PermissionError:
                    self.log(f"[‚ùå Permiss√£o negada] {caminho_destino}")
                except Exception as e:
                    self.log(f"[‚ùå Erro] {caminho_destino} - {str(e)}")


# Ponto de entrada do programa
if __name__ == "__main__":
    root = tk.Tk()
    app = AppSync(root)
    root.mainloop()
